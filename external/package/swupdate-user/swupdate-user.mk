################################################################################
#
# swupdate-user
#
################################################################################

SWUPDATE_USER_VERSION = 2018.03-rc1
SWUPDATE_USER_SITE = $(call github,sbabic,swupdate,$(SWUPDATE_USER_VERSION))
SWUPDATE_USER_LICENSE = GPL-2.0+, MIT, Public Domain
SWUPDATE_USER_LICENSE_FILES = COPYING

# swupdate bundles its own version of mongoose (version 3.8)

ifeq ($(BR2_PACKAGE_JSON_C),y)
SWUPDATE_USER_DEPENDENCIES += json-c
SWUPDATE_USER_MAKE_ENV += HAVE_JSON_C=y
else
SWUPDATE_USER_MAKE_ENV += HAVE_JSON_C=n
endif

ifeq ($(BR2_PACKAGE_LIBARCHIVE),y)
SWUPDATE_USER_DEPENDENCIES += libarchive
SWUPDATE_USER_MAKE_ENV += HAVE_LIBARCHIVE=y
else
SWUPDATE_USER_MAKE_ENV += HAVE_LIBARCHIVE=n
endif

ifeq ($(BR2_PACKAGE_LIBCONFIG),y)
SWUPDATE_USER_DEPENDENCIES += libconfig
SWUPDATE_USER_MAKE_ENV += HAVE_LIBCONFIG=y
else
SWUPDATE_USER_MAKE_ENV += HAVE_LIBCONFIG=n
endif

ifeq ($(BR2_PACKAGE_LIBCURL),y)
SWUPDATE_USER_DEPENDENCIES += libcurl
SWUPDATE_USER_MAKE_ENV += HAVE_LIBCURL=y
else
SWUPDATE_USER_MAKE_ENV += HAVE_LIBCURL=n
endif

ifeq ($(BR2_PACKAGE_LUA_5_2)$(BR2_PACKAGE_LUA_5_3),y)
SWUPDATE_USER_DEPENDENCIES += lua host-pkgconf
SWUPDATE_USER_MAKE_ENV += HAVE_LUA=y
else
SWUPDATE_USER_MAKE_ENV += HAVE_LUA=n
endif

ifeq ($(BR2_PACKAGE_MTD),y)
SWUPDATE_USER_DEPENDENCIES += mtd
SWUPDATE_USER_MAKE_ENV += HAVE_LIBMTD=y
SWUPDATE_USER_MAKE_ENV += HAVE_LIBUBI=y
else
SWUPDATE_USER_MAKE_ENV += HAVE_LIBMTD=n
SWUPDATE_USER_MAKE_ENV += HAVE_LIBUBI=n
endif

ifeq ($(BR2_PACKAGE_OPENSSL),y)
SWUPDATE_USER_DEPENDENCIES += openssl
SWUPDATE_USER_MAKE_ENV += HAVE_LIBSSL=y
SWUPDATE_USER_MAKE_ENV += HAVE_LIBCRYPTO=y
else
SWUPDATE_USER_MAKE_ENV += HAVE_LIBSSL=n
SWUPDATE_USER_MAKE_ENV += HAVE_LIBCRYPTO=n
endif

ifeq ($(BR2_PACKAGE_UBOOT_TOOLS),y)
SWUPDATE_USER_DEPENDENCIES += uboot-tools
SWUPDATE_USER_MAKE_ENV += HAVE_LIBUBOOTENV=y
else
SWUPDATE_USER_MAKE_ENV += HAVE_LIBUBOOTENV=n
endif

ifeq ($(BR2_PACKAGE_ZEROMQ),y)
SWUPDATE_USER_DEPENDENCIES += zeromq
SWUPDATE_USER_MAKE_ENV += HAVE_LIBZEROMQ=y
else
SWUPDATE_USER_MAKE_ENV += HAVE_LIBZEROMQ=n
endif

ifeq ($(BR2_PACKAGE_ZLIB),y)
SWUPDATE_USER_DEPENDENCIES += zlib
SWUPDATE_USER_MAKE_ENV += HAVE_ZLIB=y
else
SWUPDATE_USER_MAKE_ENV += HAVE_ZLIB=n
endif

SWUPDATE_USER_BUILD_CONFIG = $(@D)/.config

SWUPDATE_USER_KCONFIG_FILE = $(call qstrip,$(BR2_PACKAGE_SWUPDATE_USER_CONFIG))
SWUPDATE_USER_KCONFIG_EDITORS = menuconfig xconfig gconfig nconfig

ifeq ($(BR2_STATIC_LIBS),y)
define SWUPDATE_USER_PREFER_STATIC
	$(call KCONFIG_ENABLE_OPT,CONFIG_STATIC,$(SWUPDATE_USER_BUILD_CONFIG))
endef
endif

define SWUPDATE_USER_SET_BUILD_OPTIONS
	$(call KCONFIG_SET_OPT,CONFIG_CROSS_COMPILE,"$(TARGET_CROSS)", \
		$(SWUPDATE_USER_BUILD_CONFIG))
	$(call KCONFIG_SET_OPT,CONFIG_SYSROOT,"$(STAGING_DIR)", \
		$(SWUPDATE_USER_BUILD_CONFIG))
	$(call KCONFIG_SET_OPT,CONFIG_EXTRA_CFLAGS,"$(TARGET_CFLAGS)", \
		$(SWUPDATE_USER_BUILD_CONFIG))
	$(call KCONFIG_SET_OPT,CONFIG_EXTRA_LDFLAGS,"$(TARGET_LDFLAGS)", \
		$(SWUPDATE_USER_BUILD_CONFIG))
endef

define SWUPDATE_USER_KCONFIG_FIXUP_CMDS
	$(SWUPDATE_USER_PREFER_STATIC)
	$(SWUPDATE_USER_SET_BUILD_OPTIONS)
endef

define SWUPDATE_USER_BUILD_CMDS
	$(TARGET_MAKE_ENV) $(SWUPDATE_USER_MAKE_ENV) $(MAKE) -C $(@D)
endef

define SWUPDATE_USER_INSTALL_TARGET_CMDS
	$(INSTALL) -D -m 0755 $(@D)/swupdate $(TARGET_DIR)/usr/bin/swupdate
	$(if $(BR2_PACKAGE_SWUPDATE_USER_INSTALL_WEBSITE), \
		mkdir -p $(TARGET_DIR)/var/www/swupdate; \
		cp -dprf $(@D)/examples/www/v2/* $(TARGET_DIR)/var/www/swupdate)
endef

# Checks to give errors that the user can understand
# Must be before we call to kconfig-package
ifeq ($(BR2_PACKAGE_SWUPDATE)$(BR_BUILDING),yy)
ifeq ($(call qstrip,$(BR2_PACKAGE_SWUPDATE_USER_CONFIG)),)
$(error No Swupdate configuration file specified, check your BR2_PACKAGE_SWUPDATE_USER_CONFIG setting)
endif
endif

$(eval $(kconfig-package))
