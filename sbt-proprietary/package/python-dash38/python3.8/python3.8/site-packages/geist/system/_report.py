"""Utility functions to query the underlying system."""


def system_report():
	"""Return a report (dict) with hardware/firmware/software versions."""
	result = {}
	# Hardware
	try:
		hw_release = _key_val_file('/etc/hwrevision')
		hw_name, hw_version = next(iter(hw_release.items()))
	except (OSError, RuntimeError, StopIteration):
		pass
	else:
		result['hardware'] = {
			'name': hw_name,
			'version': hw_version,
		}
	# Software and firmware
	try:
		versions = _key_val_file('/etc/sw-versions')
	except (OSError, RuntimeError):
		pass
	else:
		result.update({name: {'version': version} for name, version in versions.items()})
	return result


def _key_val_file(path, *, ignore_malformed_lines=False):
	"""Return dict of key-value pairs for each line in the given file.

	Assumes a key-value pair per line.
	Assumes that the key and value pair is separated by white space.

	Raises OSError if an OS-level error occurs.
	Raises RuntimeError if a line is malformed (and if not set to ignore
	said lines). Note that empty lines are considered malformed.
	"""
	result = {}
	with open(path, 'r') as f:
		for l in f:
			try:
				name, version = l.split()
			except ValueError as error:
				if ignore_malformed_lines:
					continue
				raise RuntimeError(f'Stopped due to malformed line: {l}')
			result[name] = version
	return result
