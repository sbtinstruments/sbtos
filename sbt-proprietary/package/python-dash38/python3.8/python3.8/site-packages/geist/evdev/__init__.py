"""Event device (evdev) input

Many GUI frameworks' built-in evdev handler handles most evdev inputs (keyboard, mouse,
touch, etc.) but not all (switches are not handled). This is the case for, e.g.,
Qt.

In, e.g., the Zeus device we use switches for the vial. In order to handle
switch input events, we use this custom evdev handler.

### Why not simply map the switch to a key?

This was the initial approach. The "vial inserted" switch was simply mapped
to `KEY_1`. The problem is twofold:

  1. When we enable keyboard autorepeat, the "vial inserted" triggers
     repeated events for as long as the vial is inserted. This needlessly
     hogs up CPU cycles, which is especially bad on battery-driven devices.
  2. Many GUI's built-in evdev handler's don't have a way to check if a key is
     currently pressed. In turn, there is no way to know if the vial is already
     inserted when the device is turned on. This is bad since all programs are
     disabled until the vial is detected as present. In practice, this forces the user
     to needlessly remove and reinsert the vial after turning the device on.

     Qt-based example of this issue:
     https://stackoverflow.com/questions/7394660/check-if-a-key-is-down-with-qt

After much deliberation, we decided to fix this properly and model the
switch as an actual switch (SW_PEN_INSERTED) and not a key. This fixes
both of the abovementioned issues but also introduces a new one: How do we
get switch input in a Qt-based app such as dash? This module is the answer to that.

"""
from ._constants import *
from ._input import Input
