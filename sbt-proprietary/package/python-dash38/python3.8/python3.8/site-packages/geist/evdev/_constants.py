# Underscore, so it isn't imported by * imports
from evdev import ecodes as _ecodes
from enum import IntEnum as _IntEnum

# Note that evdev extracts the constants dynamically from the ecodes extension
# written in C. In turn, the C extension is autogenerated from the Linux
# kernel headers ("input.h" and "input-event-codes.h") that may be different
# depending on the target platform and the kernel version. Therefore, we
# have to check for `AttributeError` when we attempt to access the constants.


def _event_type(name: str) -> int:
	try:
		return getattr(_ecodes, name)
	except AttributeError as exc:
		raise RuntimeError(
			f"This platform does not support the {name} input event type"
		) from exc


def _event_code(name: str) -> int:
	try:
		return _ecodes.ecodes[name]
	except KeyError as exc:
		raise RuntimeError(
			f"This platform does not support the {name} input event code"
		)from exc


class EventType(_IntEnum):
	"""Event type such as "key", "switch", "LED", etc."""
	KEY = _event_type("EV_KEY")
	SWITCH = _event_type("EV_SW")
	# TODO: Add the rest of the input event types

class KeyCode(_IntEnum):
	"""Specific codes for key events."""
	# TODO: Add the rest of the input event codes

class SwitchCode(_IntEnum):
	"""Specific codes for switch events."""
	PEN_INSERTED = _event_code("SW_PEN_INSERTED")
	# TODO: Add the rest of the input event codes
