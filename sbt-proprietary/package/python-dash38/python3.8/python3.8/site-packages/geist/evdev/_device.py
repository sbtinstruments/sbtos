from __future__ import annotations

from pathlib import Path
from typing import AsyncIterator, Optional, Union

from evdev import InputDevice as EvdevInputDevice
from evdev import InputEvent, util
from evdev._input import ioctl_EVIOCG_bits  # pylint: disable=no-name-in-module
from evdev.ecodes import SW

from ._constants import EventType


class InputDevice:
	"""Async wrapper around `evdev.InputDevice`."""

	def __init__(self, device_path: Union[Path, str]):
		self._device_path = device_path
		self._dev: Optional[InputDevice] = None

	def __getattr__(self, name):
		return getattr(self._dev, name)

	def is_open(self) -> bool:
		"""Is this device open (has `__enter__` been called)."""
		return self._dev is not None

	def current_value(self, event_type: int, event_code: int) -> int:
		"""Return the current value of the given event."""
		return event_code in self.current_values(event_type)

	def current_values(self, event_type: int, verbose=False):
		"""Return current values of the given event type."""
		# We only support switches for now.
		# libevdev can only return the current value for LED, sound, and switch inputs.
		# We further limit this to switch inputs to simplify the implementation for now.
		# It is trivial to extend the implementation to support LED and sound inputs
		# as well.
		if event_type != EventType.SWITCH.value:
			raise ValueError('Only supports the "switch" event type')
		result = ioctl_EVIOCG_bits(self.fd, event_type)
		if verbose:
			return util.resolve_ecodes(SW, result)
		return result

	def events(self) -> AsyncIterator[InputEvent]:
		"""Return iterator of input events."""
		if self._dev is None:
			raise RuntimeError('Call "__enter__" before "events".')
		return self._dev.async_read_loop()

	def __enter__(self) -> InputDevice:
		# The `EvdevInputDevice.__init__` will open the device file.
		# Therefore, we call `EvdevInputDevice.__init__` here and not
		# in our own our own `__init__` function.
		self._dev = EvdevInputDevice(self._device_path)
		return self

	def __exit__(self, exc_type, exc_val, traceback) -> None:
		if self._dev is None:
			raise RuntimeError('Call "__enter__" before "__exit__".')
		# The default behaviour of `EvdevInputDevice` is to
		# close the device file on `__del__` ignoring any `OSError`.
		# This is bad design. Instead, we explicitly close the file
		# here and propagate any exceptions to the caller.
		self._dev.close()
