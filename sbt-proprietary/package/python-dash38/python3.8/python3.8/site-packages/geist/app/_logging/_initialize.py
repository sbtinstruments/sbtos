"""Useful logging defaults."""
import logging
import logging.handlers
import sys
from .._utility import app_name


def initialize_logging(logger, *, config):
	"""Add handlers for syslog and streams (with optional coloring)."""
	# Debug
	if config['system']['debug']:
		logger.setLevel(logging.DEBUG)
		logging.getLogger('asyncio').setLevel(logging.DEBUG)
	else:
		logger.setLevel(logging.INFO)
		logging.getLogger('asyncio').setLevel(logging.WARNING)

	# Warnings
	logging.captureWarnings(True)

	# Syslog
	if not config['system']['foreground']:
		facility = logging.handlers.SysLogHandler.LOG_DAEMON
		syslog_handler = logging.handlers.SysLogHandler(address='/dev/log', facility=facility)
		syslog_handler.setLevel(logging.DEBUG)
		fmt = f'{app_name()}' + '[{process}] [{name}] {message}'
		syslog_formatter = logging.Formatter(fmt=fmt, style='{')
		syslog_handler.setFormatter(syslog_formatter)
		logger.addHandler(syslog_handler)

	# Stream
	else:
		fmt = '%(asctime)s %(name)s[%(process)s] %(levelname)s %(message)s'
		datefmt = '%d-%m-%Y %H:%M:%S %z'

		# Coloring
		try:
			from coloredlogs import ColoredFormatter
			stream_formatter = ColoredFormatter(fmt=fmt, datefmt=datefmt)
		# No coloring
		except ImportError:
			stream_formatter = logging.Formatter(fmt=fmt, datefmt=datefmt)

		stream_handler = logging.StreamHandler(stream=sys.stdout)
		stream_handler.setLevel(logging.DEBUG)
		stream_handler.setFormatter(stream_formatter)
		logger.addHandler(stream_handler)
