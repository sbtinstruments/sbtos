"""Useful asyncio defaults."""
import signal
import logging
from functools import wraps
from sys import platform
from typing import ContextManager


_LOGGER = logging.getLogger(__name__)


class SignalHandler(ContextManager):
	def __init__(self, loop, *, terminate):
		self._loop = loop
		_terminate = _log_first(terminate)
		if platform.startswith('win32'):
			# From the docs:
			#
			# > On Windows, signal() can only be called with SIGABRT, SIGFPE,
			# > SIGILL, SIGINT, SIGSEGV, SIGTERM, or SIGBREAK. A ValueError
			# > will be raised in any other case. Note that not all systems
			# > define the same set of signal names; an AttributeError will
			# > be raised if a signal name is not defined as SIG* module
			# > level constant.

			# See: https://docs.python.org/3/library/signal.html#signal.signal
			# Copied 2020-04-19
			#
			# Therefore, we don't define as many signal handlers in the mapping.
			self._mapping = {
				signal.SIGINT: _terminate,
				signal.SIGTERM: _terminate,
			}	
		else:
			# SIGINT:  Interrupt. User presses CTRL-C. Indicates 'happy' termination
			# SIGQUIT: Quit.	  User presses CTRL-\. Indicates 'unhappy' termination
			# SIGTERM: Terminate. System  the process ('happily' or not).
			# Reference: https://www.quora.com/What-is-the-difference-between-the-SIGINT-and-SIGTERM-signals-in-Linux # noqa: 501 # pylint: disable=line-too-long
			self._mapping = {
				signal.SIGINT: _terminate,
				signal.SIGQUIT: _terminate,
				signal.SIGTERM: _terminate,
				signal.SIGUSR2: _log_first(_dump_object_allocations),
			}

	def __enter__(self):
		for constant, handler in self._mapping.items():
			self._loop.add_signal_handler(constant, handler, constant, self._loop)
		return self

	def __exit__(self, *args, **kwargs):
		if platform.startswith('win32'):
			# On Windows, we can't remove a signal handler.
			# We simply do nothing instead.
			return
		for name in self._mapping.keys():
			self._loop.remove_signal_handler(name)


def _log_first(func):
	@wraps(func)
	def _wrapper(constant, *args, **kwargs):
		_LOGGER.info(f'Interrupted by {constant.name}.')  # pylint: disable=no-member
		func(constant, *args, **kwargs)
	return _wrapper

def _dump_object_allocations(*_):
	_LOGGER.info('Dumping object allocations.')
	try:
		from pympler import summary, muppy
	except ImportError as error:
		_LOGGER.error('Module "pympler" is not installed. Aborting.')
		_LOGGER.debug('Reason:', exc_info=error)
		return
	_LOGGER.info('Gathering all python objects.')
	all_objects = muppy.get_objects()
	_LOGGER.info('Creating summary of objects.')
	sum1 = summary.summarize(all_objects)
	_LOGGER.info('Printing summary.')
	summary.print_(sum1, limit=100)
