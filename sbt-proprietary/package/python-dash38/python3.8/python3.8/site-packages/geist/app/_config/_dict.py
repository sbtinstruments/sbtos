"""Adds support for various utility functions and mini languages to Python dicts."""
import re
import jmespath


class ExpandJmespathExprError(RuntimeError):
	"""Error during expansion of JMESPath expression."""


def expand_jmespath_expr_str(string,
                             source,
                             *,
                             expr_transform=None,
                             expr_filter=None):
	"""Expand any jmespath expressions found in the string with the values from the source dict."""
	def _repl(match):
		# The stuff inside the curly braces. E.g., "{this_stuff}".
		jmespath_expr = match.group(0)[1:-1]
		# Only transform expressions that passes the filter
		if expr_filter:
			if re.fullmatch(expr_filter, jmespath_expr) is None:
				return match.group(0)
		# Transform the jmespath expression. E.g., convert it to snake_case.
		if expr_transform:
			jmespath_expr = expr_transform(jmespath_expr)
		res = jmespath.search(jmespath_expr, source)
		if res is None:
			raise ExpandJmespathExprError(('Unable to resolve the jmespath expression: '
			                               f'"{jmespath_expr}"'))
		return res
	return re.sub(r'\{[a-zA-Z0-9_\.]+\}', _repl, string)


def expand_jmespath_expr(dict_,
                         source=None,
                         *,
                         expr_transform=None,
                         expr_filter=None):
	"""Use expand_jmespath_expr_str on all string values found in the dict.

	Works recursively (though not in lists).
	"""
	if source is None:
		source = dict_
	result = {}
	for key, val in dict_.items():
		# Recurse
		if isinstance(val, dict):
			result[key] = expand_jmespath_expr(val,
			                                   source,
			                                   expr_transform=expr_transform,
			                                   expr_filter=expr_filter)
		# String replacement
		elif isinstance(val, str):
			result[key] = expand_jmespath_expr_str(val,
			                                       source,
			                                       expr_transform=expr_transform,
			                                       expr_filter=expr_filter)
		# Otherwise, simple copy
		else:
			result[key] = val
	return result
