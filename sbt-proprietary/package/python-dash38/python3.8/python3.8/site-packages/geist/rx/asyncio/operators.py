import asyncio
import logging
from typing import Callable
from rx import operators as ops
from .._from_future import from_future


_LOGGER = logging.getLogger(__name__)


def map_in_executor(func: Callable):
	loop = asyncio.get_event_loop()
	exceptions = (Exception, asyncio.CancelledError)
	def _map_in_executor(source):
		def wrapper(value):
			future = loop.run_in_executor(None, func, value)
			return from_future(future, exceptions=exceptions)
		return source.pipe(
			ops.flat_map(wrapper)
		)
	return _map_in_executor
