import asyncio  # For typing
import typing
from rx import Observable
from rx.core.typing import Observer, Scheduler
from rx.disposable import Disposable


def from_future(future: asyncio.Future,
                *,
                exceptions: typing.Tuple[BaseException, ...] = None
                ) -> Observable:
	"""Converts a Future to an Observable sequence
	Args:
		future -- A Python 3 compatible future.
			https://docs.python.org/3/library/asyncio-task.html#future
			http://www.tornadoweb.org/en/stable/concurrent.html#tornado.concurrent.Future
		exceptions (optional): A tuple of exception types that should be forwarded.
			Defaults to (Exception).
	Returns:
		An Observable sequence which wraps the existing future success
		and failure.

	Based on rx.from_future from RxPy itself. FPA added the 'exceptions' kwarg.
	"""
	if exceptions is None:
		exceptions = (Exception)

	def subscribe(observer: Observer,
				  scheduler: typing.Optional[Scheduler] = None
				  ) -> Disposable:
		def done(future):
			try:
				value = future.result()
			except exceptions as ex:  # pylint: disable=broad-except
				observer.on_error(ex)
			else:
				observer.on_next(value)
				observer.on_completed()

		future.add_done_callback(done)

		def dispose() -> None:
			if future and future.cancel:
				future.cancel()

		return Disposable(dispose)

	return Observable(subscribe)
