"""Classes and helper utilites for time-controlled collections."""
from collections import deque
from time import time as _time

import logging
_LOGGER = logging.getLogger(__name__)


class TemporalDeque:
	"""Queue with time-stamped entries and automated temporal culling."""

	def __init__(self, retention_period):
		"""Construct with given retention period."""
		self._data = deque()
		self._retention_period = retention_period

	def append(self, value, timestamp=None):
		"""Append given value to the queue.

		The default timestamp is the time of this call.
		"""
		ts = timestamp if timestamp is not None else _time()
		self._data.append({
			'time': ts,
			'value': value,
		})

	def cull(self):
		"""Remove all entries outside the retention period."""
		if not self._data or len(self._data) == 0:
			return
		now = _time()
		while len(self._data) > 0 and self._retention_period < now - self._data[0]['time']:
			self._data.popleft()

	def clear(self):
		"""Remove all entries."""
		self._data.clear()

	def items(self, *, after=0):
		"""Return the items in the queue (with timestamps)."""
		return (v for v in self._data if after < v['time'])

	def values(self, *, after=0):
		"""Return the values in the queue (wihtout timestamps)."""
		return (v['value'] for v in self._data if after < v['time'])
