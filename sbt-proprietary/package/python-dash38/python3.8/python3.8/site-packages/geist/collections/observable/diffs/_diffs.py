from __future__ import annotations

from dataclasses import dataclass, replace, field
from typing import TypeVar, Generic, Union, FrozenSet


AT = TypeVar("AT")
KT = TypeVar("KT")
VT = TypeVar("VT")


@dataclass(frozen=True)
class Diff(Generic[AT]):
	author: AT
	stamps: FrozenSet[AT] = field(init=False)

	def __post_init__(self):
		object.__setattr__(self, "stamps", frozenset((self.author,)))

	def add_stamp(self, author: AT) -> Diff:
		new = replace(self)  # Make a copy to avoid mutating self
		object.__setattr__(new, "stamps", self.stamps.union((author,)))
		return new

	def add_stamps(self, *authors: AT) -> Diff:
		new = replace(self)  # Make a copy to avoid mutating self
		object.__setattr__(new, "stamps", self.stamps.union(authors))
		return new


@dataclass(frozen=True)
class RemoveValue(Generic[AT, VT], Diff[AT]):
	value: VT

@dataclass(frozen=True)
class AddValue(Generic[AT, VT], Diff[AT]):
	value: VT

SetDiffs = Union[RemoveValue, AddValue]


@dataclass(frozen=True)
class KeyDiff(Generic[AT, KT], Diff[AT]):
	key: KT

	def replace_key(self, key: KT) -> KeyDiff:
		return replace(self, key=key)


@dataclass(frozen=True)
class DelItem(KeyDiff[AT, KT]):
	pass


@dataclass(frozen=True)
class SetItem(Generic[AT, KT, VT], KeyDiff[AT, KT]):
	value: VT

	def replace_value(self, value: VT) -> SetItem:
		return replace(self, value=value)


MapDiffs = Union[DelItem, SetItem]
