from abc import ABC, abstractmethod
from typing import TypeVar, Generic, Optional
from uuid import uuid4

from rx import Observable

AT = TypeVar("AT")

class Collection(ABC, Generic[AT]):
	"""Abstract base class for all observable collections."""

	def __init__(self, *, author: Optional[AT] = None):
		if author is None:
			author = uuid4()
		self._author = author

	@property
	def author(self) -> AT:
		"""Return the author used in diffs."""
		return self._author

	@abstractmethod
	def changes(self) -> Observable:
		"""Return observable of all changes made to this collection."""
		...
