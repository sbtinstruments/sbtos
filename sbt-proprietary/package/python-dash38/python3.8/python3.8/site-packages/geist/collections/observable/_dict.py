import logging
from typing import Iterator, Optional, TypeVar

from . import diffs, abc

_LOGGER = logging.getLogger(__name__)

AT = TypeVar("AT")
KT = TypeVar("KT")
VT = TypeVar("VT")


class Dict(abc.MutableMapping[AT, KT, VT]):
	"""Observable dict."""

	def __init__(self, *, author: Optional[AT] = None) -> None:
		super().__init__(author=author)
		self._data = {}

	def apply(self, *differences: diffs.MapDiffs) -> None:
		"""Apply the given diffs to this collection."""
		for diff in differences:
			# Ignore diffs that we have already applied (put our stamp on)
			if self._author in diff.stamps:
				continue
			if isinstance(diff, diffs.DelItem):
				try:
					self.__delitem__(diff.key, diff=diff)
				except KeyError:
					# If the item is already deleted, the diff is already
					# applied. I.e., there is no reason to raise an error.
					continue
			elif isinstance(diff, diffs.SetItem):
				self.__setitem__(diff.key, diff.value, diff=diff)
			else:
				raise ValueError(f"Unknown diff: {diff}")

	def __len__(self) -> int:
		return len(self._data)

	def __iter__(self) -> Iterator[KT]:
		return iter(self._data)

	def __getitem__(self, key: KT) -> VT:
		return self._data[key]

	def __setitem__(self, key: KT, value: VT, *, diff: Optional[diffs.SetItem] = None) -> None:
		# Change detection
		try:
			changed = self[key] != value
		except KeyError:
			changed = True
		# Early out
		if not changed:
			return
		# Mutation
		self._data[key] = value
		# Change notification
		if changed:
			if diff is None:
				diff = diffs.SetItem(self._author, key, value)
			else:
				# Add our stamp to the diff so that we won't apply it twice
				diff = diff.add_stamp(self._author)
			self._changes.on_next(diff)

	def __delitem__(self, key: KT, *, diff: Optional[diffs.DelItem] = None) -> None:
		# Change detection
		changed = key in self
		if not changed:
			return
		# Mutation
		del self._data[key]
		# Change notification
		if changed:
			if diff is None:
				diff = diffs.DelItem(self._author, key)
			else:
				# Add our stamp to the diff so that we won't apply it twice
				diff = diff.add_stamp(self._author)
			self._changes.on_next(diff)

	def __repr__(self) -> str:
		return repr(self._data)
