import inspect
import json
from pathlib import Path
from aiohttp import web
from jsonschema import Draft4Validator
from jsonschema.exceptions import ValidationError


def validate_json(*, schema_dir=None, key=None):
	"""Use in an aiohttp request handler to ensure that the received JSON document is valid.

	Looks for a jsonschema named after the request handler.
	"""
	def _function_wrapper(handler):
		# If schema_dir is not provided explicitly, we use the handler's source
		# file directory.
		nonlocal schema_dir
		if schema_dir is None:
			# Seemingly, getfile() returns an absolute path but without the leading "/".
			# E.g., "usr/lib/python3.7/site-packages/baxter/server/sinks/sink_handler.py"
			# We add the leading "/" manually.
			# This way, the current working directory does not influence the handler_path.
			handler_file = Path('/' + inspect.getfile(handler))
			schema_dir = handler_file.resolve().parent
		# Get JSON schema for the handler.
		# The convention is to give the schema the same name as the handler.
		with open(schema_dir / f'{handler.__name__}.schema.json') as f:
			# This will throw if the schema is invalid JSON
			schema = json.load(f)
			#  This will throw if the schema is invalid JSON schema
			Draft4Validator.check_schema(schema)
			validator = Draft4Validator(schema)

		async def _wrapper(self, request):
			try:
				# Attempt to decide the JSON request
				body = await request.json()
				# Optionally find the JSON data under the correct key
				if key is not None:
					body = body[key]
				# Validate the body according to the schema
				validator.validate(body)
			except json.JSONDecodeError as error:
				raise web.HTTPBadRequest(text=str(error))
			except ValidationError as error:
				# We use error_path to provide the user with a bit of context.
				# This should make errors easier to resolve.
				error_path = '' if not error.path else f'{str(list(error.path))}: '
				raise web.HTTPBadRequest(text=f'{error_path}{error.message}')
			# The handler may wish to get the body passed down as an additional argument...
			sig = inspect.signature(handler)
			if len(sig.parameters) == 3:
				return await handler(self, request, body)
			# ...Or not.
			return await handler(self, request)
		return _wrapper
	return _function_wrapper


__all__ = ['validate_json']
