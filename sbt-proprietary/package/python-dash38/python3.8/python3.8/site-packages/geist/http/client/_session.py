"""General-purpose session management."""
import aiohttp


class Session():
	"""Session manager. Wrapper around aiohttp.ClientSession.

	Remembers the url that the client session is supposed to connect to.
	"""

	def __init__(self, hostname, port=8083, *, raise_for_status=True):
		"""Construct session that connects to the given hostname."""
		self._hostname = hostname
		self._port = port
		self._session = None
		if raise_for_status is True:
			self._raise_for_status = self._raise_for_status_wrapper
		else:
			self._raise_for_status = raise_for_status

	def get(self, *args, **kwargs):
		"""Make a GET request."""
		return self._session.get(*args, **kwargs)

	def head(self, *args, **kwargs):
		"""Make a HEAD request."""
		return self._session.head(*args, **kwargs)

	def patch(self, *args, **kwargs):
		"""Make a PATCH request."""
		return self._session.patch(*args, **kwargs)

	def post(self, *args, **kwargs):
		"""Make a POST request."""
		return self._session.post(*args, **kwargs)

	def put(self, *args, **kwargs):
		"""Make a PUT request."""
		return self._session.put(*args, **kwargs)

	def delete(self, *args, **kwargs):
		"""Make a DELETE request."""
		return self._session.delete(*args, **kwargs)

	def ws_connect(self, *args, **kwargs):
		"""Make a WebSocket request."""
		return self._session.ws_connect(*args, **kwargs)

	@property
	def url(self):
		"""Return base url that this session is supposed to connect to."""
		return f'http://{self._hostname}:{self._port}'

	async def _raise_for_status_wrapper(self, resp: aiohttp.ClientResponse):
		"""Raise aiohttp.ClientResponseError if the status code is too high.

		This is a reimplementation of aiohttp.ClientResponse.raise_for_status()
		that returns the response body as the exception message.
		"""
		if 400 <= resp.status:
			text = await resp.text()
			# reason should always be not None for a started response
			assert resp.reason is not None
			message = text if text else resp.reason
			resp.release()
			raise aiohttp.ClientResponseError(
				resp.request_info,
				resp.history,
				status=resp.status,
				message=message,
				headers=resp.headers)

	async def __aenter__(self):
		"""Start client session."""
		# Change default to 10 seconds total (the aiohttp default is 300 seconds!)
		timeout = aiohttp.ClientTimeout(total=10)
		self._session = aiohttp.ClientSession(
			raise_for_status=self._raise_for_status,
			timeout=timeout
		)
		await self._session.__aenter__()
		return self

	async def __aexit__(self, *args, **kwargs):
		"""Stop client session."""
		await self._session.__aexit__(*args, **kwargs)
