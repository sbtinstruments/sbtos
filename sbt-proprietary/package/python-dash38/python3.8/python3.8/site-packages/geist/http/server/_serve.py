"""Run an aiohttp webserver without all the hassle."""
import asyncio
import logging
from aiohttp import web
from ...asyncio import sleep_forever


_LOGGER = logging.getLogger(__name__)


async def serve(app, *, config):
	"""Serve forever (or until the coroutine is cancelled)."""
	runner = web.AppRunner(app)
	try:
		await runner.setup()
		site = web.TCPSite(runner, config['hostname'], config['port'])
		await site.start()
		await sleep_forever()
	finally:
		await runner.cleanup()
		# aiohttp needs a little time to close underlying client connections.
		# A warning is issued otherwise.
		# Reference: https://github.com/aio-libs/aiohttp/issues/1115
		# Reference: https://github.com/aio-libs/aiohttp/issues/2039
		await asyncio.sleep(0.25)
