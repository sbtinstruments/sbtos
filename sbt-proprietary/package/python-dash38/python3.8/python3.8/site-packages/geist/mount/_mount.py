"""Basic wrapper around the mount API from the C standard library."""
import ctypes
import ctypes.util
import os
from sys import platform


_libc = ctypes.CDLL(ctypes.util.find_library('c'), use_errno=True)
_libc.mount.argtypes = (ctypes.c_char_p,
                        ctypes.c_char_p,
                        ctypes.c_char_p,
                        ctypes.c_ulong,
                        ctypes.c_void_p)
_libc.umount2.argtypes = (ctypes.c_char_p,
                          ctypes.c_int)

MS_BIND = 4096


def mount(source, target, fs, mount_flags=0):
	"""
	Mount the given source device to the given target directory.

	Inspired by: https://stackoverflow.com/a/29156997/554283
	"""
	ret = _libc.mount(source.encode('ascii'),
	                  target.encode('ascii'),
	                  fs.encode('ascii'),
	                  mount_flags,
	                  0)
	if 0 == ret:
		return
	errno = ctypes.get_errno()
	error = os.strerror(errno)
	raise OSError(errno, f'Error mounting {source} ({fs}) on {target}: {error}')


def umount(target):
	"""
	Unmount the given target directory.
	"""
	ret = _libc.umount(target.encode('ascii'), 0)
	if 0 == ret:
		return
	errno = ctypes.get_errno()
	error = os.strerror(errno)
	raise OSError(errno, f'Error unmounting {target}: {error}')
