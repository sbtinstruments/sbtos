def jmespath_expr_to_dict(expr, value=None):
	"""Create a dict from the given jmespath expression.

	Optionally, a value can be set for the innermost element.
	"""
	result = value
	keys = expr.split('.')
	for key in reversed(keys):
		result = {key: result}
	return result

def merge_left(first, second):
	"""Merge the second dict into the first dict (the first dict is modified in place).

	Returns changes (the delta) as a new dict.
	"""
	changes = {}
	for key, val in second.items():
		if isinstance(val, dict):
			if not val:
				continue
			if not first.get(key):
				first[key] = {}
			sub_changes = merge_left(first[key], val)
			if sub_changes:
				changes[key] = sub_changes
		else:
			if key in first and first[key] == val:
				continue
			first[key] = val
			changes[key] = val
	return changes
