"""Main entry point to the frog service.


"""
import asyncio
import logging
import os
import re
import subprocess
from typing import Optional

from geist.app import App  # type: ignore

from .archive import gen_csv_summary

_LOGGER = logging.getLogger()


async def main(app):  # type: ignore  # pylint: disable=unused-argument
    """Loop on USB gadget state and create csv when the device is connected to a PC."""
    # Reference: https://www.kernel.org/doc/Documentation/ABI/stable/sysfs-class-udc
    # The most common states: configured -> plugged in and
    # not attached -> unplugged
    state: Optional[str] = None
    old_state: Optional[str] = None
    while 1:
        process = subprocess.run(
            ["cat", "/sys/class/udc/ci_hdrc.0/state"],
            stdout=subprocess.PIPE,
            check=True,
        ).stdout.decode("utf-8")
        state = str(process).strip()
        if state != old_state:
            _LOGGER.info("USB gadget state: %s", state)
        if state == "configured" and old_state != "configured":
            # Un-mount from PC - remouveUSBgadget
            rm_usb_gadget()
            # Format fs to prevent file corruption
            mkdos_fs()
            # Mount the storage on device - mount
            mount_storage()
            # Write csv summary
            gen_csv_summary(sink="/media/usb_gadget/")
            # Unmount the storage from device - unmount - /media-usb_gadget/
            unmount_storage()
            # Re-mount the storage on PC - addUSBgadget
            add_usb_gadget()
            _LOGGER.info("UDC restarted")
        old_state = state
        await asyncio.sleep(1)


def unmount_storage() -> None:
    """Unmount USB gadget filesystem."""
    # Do not use geist.umount('/media/usb_gadget/'). It causes FS
    # synchronization issues and the CSV file does not get's rewritten
    # during subsequent plug-unplug events.
    subprocess.run(
        ["umount", "/media/usb_gadget/"], stdout=subprocess.PIPE, check=True
    ).stdout.decode("utf-8")


def mount_storage() -> None:
    """Mount USB gadget filesystem."""
    # Do not use geist.mount('/dev/loop0', '/media/usb_gadget','vfat'). See unmount_storage().
    subprocess.run(
        ["mount", "/dev/loop0", "/media/usb_gadget"], stdout=subprocess.PIPE, check=True
    ).stdout.decode("utf-8")


def rm_usb_gadget() -> None:
    """Disable USB gadget."""
    os.system('echo "" > /sys/kernel/config/usb_gadget/mass_storage0/UDC')


def add_usb_gadget() -> None:
    """Enbale USB gadget."""
    os.system('echo "ci_hdrc.0" > /sys/kernel/config/usb_gadget/mass_storage0/UDC')


def mkdos_fs() -> None:
    """Make file system."""
    p_name = get_product_name()
    subprocess.run(["mkdosfs", "-n", p_name, "/dev/loop0"], check=True)


def get_product_name() -> str:
    """Get hardware name."""
    pat = re.compile('(?<=PRETTY_NAME=")[a-zA-Z]*')
    for __, line in enumerate(open("/etc/hw-release")):
        for match in re.finditer(pat, line):
            return match.group()
    return ""


# This file always executes
App.launch(main)
